version: '3'

services:

  db:
    container_name: db
    image: postgres:14
    restart: always
    logging:
      driver: none
    environment:
      POSTGRES_DB: "next-app"
      POSTGRES_USER: "next-app"
      POSTGRES_PASSWORD: "next-app"
    ports:
      - "5433:5432"
    networks:
      - dev
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U waves-school -d waves-school'" ]
      interval: 100s
      timeout: 300s
      retries: 300

  backend:
    container_name: backend
    command: node cluster.js
    links:
      - db
    #    env_file: "./backend/.env"
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_HOST: "db"
      DATABASE_CLIENT: "postgres"
      DATABASE_PORT: "5432"
      DATABASE_USERNAME: "next-app"
      DATABASE_PASSWORD: "next-app"

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
#      args:
#        ENV_VARIABLE: ${ENV_VARIABLE}
#        NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}
    restart: always
    ports:
      - 3000:3000
    networks:
      - dev-network

  # Add more containers below (nginx, postgres, etc.)

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  dev-network:
    driver: bridge

volumes:
  myapp:

